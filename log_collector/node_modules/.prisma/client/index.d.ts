
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model RawLog
 * 
 */
export type RawLog = $Result.DefaultSelection<Prisma.$RawLogPayload>
/**
 * Model Session
 * 
 */
export type Session = $Result.DefaultSelection<Prisma.$SessionPayload>
/**
 * Model Rule
 * 
 */
export type Rule = $Result.DefaultSelection<Prisma.$RulePayload>

/**
 * Enums
 */
export namespace $Enums {
  export const sessionLabel: {
  NORMAL: 'NORMAL',
  MALICIOUS: 'MALICIOUS'
};

export type sessionLabel = (typeof sessionLabel)[keyof typeof sessionLabel]

}

export type sessionLabel = $Enums.sessionLabel

export const sessionLabel: typeof $Enums.sessionLabel

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more RawLogs
 * const rawLogs = await prisma.rawLog.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more RawLogs
   * const rawLogs = await prisma.rawLog.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.rawLog`: Exposes CRUD operations for the **RawLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RawLogs
    * const rawLogs = await prisma.rawLog.findMany()
    * ```
    */
  get rawLog(): Prisma.RawLogDelegate<ExtArgs>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<ExtArgs>;

  /**
   * `prisma.rule`: Exposes CRUD operations for the **Rule** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Rules
    * const rules = await prisma.rule.findMany()
    * ```
    */
  get rule(): Prisma.RuleDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    RawLog: 'RawLog',
    Session: 'Session',
    Rule: 'Rule'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "rawLog" | "session" | "rule"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      RawLog: {
        payload: Prisma.$RawLogPayload<ExtArgs>
        fields: Prisma.RawLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RawLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RawLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RawLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RawLogPayload>
          }
          findFirst: {
            args: Prisma.RawLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RawLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RawLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RawLogPayload>
          }
          findMany: {
            args: Prisma.RawLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RawLogPayload>[]
          }
          create: {
            args: Prisma.RawLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RawLogPayload>
          }
          createMany: {
            args: Prisma.RawLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RawLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RawLogPayload>[]
          }
          delete: {
            args: Prisma.RawLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RawLogPayload>
          }
          update: {
            args: Prisma.RawLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RawLogPayload>
          }
          deleteMany: {
            args: Prisma.RawLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RawLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RawLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RawLogPayload>
          }
          aggregate: {
            args: Prisma.RawLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRawLog>
          }
          groupBy: {
            args: Prisma.RawLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<RawLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.RawLogCountArgs<ExtArgs>
            result: $Utils.Optional<RawLogCountAggregateOutputType> | number
          }
        }
      }
      Session: {
        payload: Prisma.$SessionPayload<ExtArgs>
        fields: Prisma.SessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findFirst: {
            args: Prisma.SessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findMany: {
            args: Prisma.SessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          create: {
            args: Prisma.SessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          createMany: {
            args: Prisma.SessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          delete: {
            args: Prisma.SessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          update: {
            args: Prisma.SessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          deleteMany: {
            args: Prisma.SessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          aggregate: {
            args: Prisma.SessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSession>
          }
          groupBy: {
            args: Prisma.SessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionCountArgs<ExtArgs>
            result: $Utils.Optional<SessionCountAggregateOutputType> | number
          }
        }
      }
      Rule: {
        payload: Prisma.$RulePayload<ExtArgs>
        fields: Prisma.RuleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RuleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RulePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RuleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RulePayload>
          }
          findFirst: {
            args: Prisma.RuleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RulePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RuleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RulePayload>
          }
          findMany: {
            args: Prisma.RuleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RulePayload>[]
          }
          create: {
            args: Prisma.RuleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RulePayload>
          }
          createMany: {
            args: Prisma.RuleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RuleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RulePayload>[]
          }
          delete: {
            args: Prisma.RuleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RulePayload>
          }
          update: {
            args: Prisma.RuleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RulePayload>
          }
          deleteMany: {
            args: Prisma.RuleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RuleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RuleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RulePayload>
          }
          aggregate: {
            args: Prisma.RuleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRule>
          }
          groupBy: {
            args: Prisma.RuleGroupByArgs<ExtArgs>
            result: $Utils.Optional<RuleGroupByOutputType>[]
          }
          count: {
            args: Prisma.RuleCountArgs<ExtArgs>
            result: $Utils.Optional<RuleCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type SessionCountOutputType
   */

  export type SessionCountOutputType = {
    rawLogs: number
  }

  export type SessionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rawLogs?: boolean | SessionCountOutputTypeCountRawLogsArgs
  }

  // Custom InputTypes
  /**
   * SessionCountOutputType without action
   */
  export type SessionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionCountOutputType
     */
    select?: SessionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SessionCountOutputType without action
   */
  export type SessionCountOutputTypeCountRawLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RawLogWhereInput
  }


  /**
   * Models
   */

  /**
   * Model RawLog
   */

  export type AggregateRawLog = {
    _count: RawLogCountAggregateOutputType | null
    _avg: RawLogAvgAggregateOutputType | null
    _sum: RawLogSumAggregateOutputType | null
    _min: RawLogMinAggregateOutputType | null
    _max: RawLogMaxAggregateOutputType | null
  }

  export type RawLogAvgAggregateOutputType = {
    id: number | null
    remote_port: number | null
    local_port: number | null
    sessionId: number | null
  }

  export type RawLogSumAggregateOutputType = {
    id: number | null
    remote_port: number | null
    local_port: number | null
    sessionId: number | null
  }

  export type RawLogMinAggregateOutputType = {
    id: number | null
    transaction_id: string | null
    timestamp: Date | null
    remote_host: string | null
    remote_port: number | null
    local_host: string | null
    local_port: number | null
    method: string | null
    uri: string | null
    http_version: string | null
    host: string | null
    user_agent: string | null
    request_body: string | null
    response_body: string | null
    created_at: Date | null
    sessionId: number | null
  }

  export type RawLogMaxAggregateOutputType = {
    id: number | null
    transaction_id: string | null
    timestamp: Date | null
    remote_host: string | null
    remote_port: number | null
    local_host: string | null
    local_port: number | null
    method: string | null
    uri: string | null
    http_version: string | null
    host: string | null
    user_agent: string | null
    request_body: string | null
    response_body: string | null
    created_at: Date | null
    sessionId: number | null
  }

  export type RawLogCountAggregateOutputType = {
    id: number
    transaction_id: number
    timestamp: number
    remote_host: number
    remote_port: number
    local_host: number
    local_port: number
    method: number
    uri: number
    http_version: number
    host: number
    user_agent: number
    request_headers: number
    request_body: number
    response_headers: number
    response_body: number
    matched_rules: number
    audit_summary: number
    full_log: number
    created_at: number
    sessionId: number
    _all: number
  }


  export type RawLogAvgAggregateInputType = {
    id?: true
    remote_port?: true
    local_port?: true
    sessionId?: true
  }

  export type RawLogSumAggregateInputType = {
    id?: true
    remote_port?: true
    local_port?: true
    sessionId?: true
  }

  export type RawLogMinAggregateInputType = {
    id?: true
    transaction_id?: true
    timestamp?: true
    remote_host?: true
    remote_port?: true
    local_host?: true
    local_port?: true
    method?: true
    uri?: true
    http_version?: true
    host?: true
    user_agent?: true
    request_body?: true
    response_body?: true
    created_at?: true
    sessionId?: true
  }

  export type RawLogMaxAggregateInputType = {
    id?: true
    transaction_id?: true
    timestamp?: true
    remote_host?: true
    remote_port?: true
    local_host?: true
    local_port?: true
    method?: true
    uri?: true
    http_version?: true
    host?: true
    user_agent?: true
    request_body?: true
    response_body?: true
    created_at?: true
    sessionId?: true
  }

  export type RawLogCountAggregateInputType = {
    id?: true
    transaction_id?: true
    timestamp?: true
    remote_host?: true
    remote_port?: true
    local_host?: true
    local_port?: true
    method?: true
    uri?: true
    http_version?: true
    host?: true
    user_agent?: true
    request_headers?: true
    request_body?: true
    response_headers?: true
    response_body?: true
    matched_rules?: true
    audit_summary?: true
    full_log?: true
    created_at?: true
    sessionId?: true
    _all?: true
  }

  export type RawLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RawLog to aggregate.
     */
    where?: RawLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RawLogs to fetch.
     */
    orderBy?: RawLogOrderByWithRelationInput | RawLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RawLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RawLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RawLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RawLogs
    **/
    _count?: true | RawLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RawLogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RawLogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RawLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RawLogMaxAggregateInputType
  }

  export type GetRawLogAggregateType<T extends RawLogAggregateArgs> = {
        [P in keyof T & keyof AggregateRawLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRawLog[P]>
      : GetScalarType<T[P], AggregateRawLog[P]>
  }




  export type RawLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RawLogWhereInput
    orderBy?: RawLogOrderByWithAggregationInput | RawLogOrderByWithAggregationInput[]
    by: RawLogScalarFieldEnum[] | RawLogScalarFieldEnum
    having?: RawLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RawLogCountAggregateInputType | true
    _avg?: RawLogAvgAggregateInputType
    _sum?: RawLogSumAggregateInputType
    _min?: RawLogMinAggregateInputType
    _max?: RawLogMaxAggregateInputType
  }

  export type RawLogGroupByOutputType = {
    id: number
    transaction_id: string
    timestamp: Date
    remote_host: string | null
    remote_port: number | null
    local_host: string | null
    local_port: number | null
    method: string | null
    uri: string | null
    http_version: string | null
    host: string | null
    user_agent: string | null
    request_headers: JsonValue | null
    request_body: string | null
    response_headers: JsonValue | null
    response_body: string | null
    matched_rules: JsonValue | null
    audit_summary: JsonValue | null
    full_log: JsonValue
    created_at: Date
    sessionId: number | null
    _count: RawLogCountAggregateOutputType | null
    _avg: RawLogAvgAggregateOutputType | null
    _sum: RawLogSumAggregateOutputType | null
    _min: RawLogMinAggregateOutputType | null
    _max: RawLogMaxAggregateOutputType | null
  }

  type GetRawLogGroupByPayload<T extends RawLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RawLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RawLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RawLogGroupByOutputType[P]>
            : GetScalarType<T[P], RawLogGroupByOutputType[P]>
        }
      >
    >


  export type RawLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    transaction_id?: boolean
    timestamp?: boolean
    remote_host?: boolean
    remote_port?: boolean
    local_host?: boolean
    local_port?: boolean
    method?: boolean
    uri?: boolean
    http_version?: boolean
    host?: boolean
    user_agent?: boolean
    request_headers?: boolean
    request_body?: boolean
    response_headers?: boolean
    response_body?: boolean
    matched_rules?: boolean
    audit_summary?: boolean
    full_log?: boolean
    created_at?: boolean
    sessionId?: boolean
    session?: boolean | RawLog$sessionArgs<ExtArgs>
  }, ExtArgs["result"]["rawLog"]>

  export type RawLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    transaction_id?: boolean
    timestamp?: boolean
    remote_host?: boolean
    remote_port?: boolean
    local_host?: boolean
    local_port?: boolean
    method?: boolean
    uri?: boolean
    http_version?: boolean
    host?: boolean
    user_agent?: boolean
    request_headers?: boolean
    request_body?: boolean
    response_headers?: boolean
    response_body?: boolean
    matched_rules?: boolean
    audit_summary?: boolean
    full_log?: boolean
    created_at?: boolean
    sessionId?: boolean
    session?: boolean | RawLog$sessionArgs<ExtArgs>
  }, ExtArgs["result"]["rawLog"]>

  export type RawLogSelectScalar = {
    id?: boolean
    transaction_id?: boolean
    timestamp?: boolean
    remote_host?: boolean
    remote_port?: boolean
    local_host?: boolean
    local_port?: boolean
    method?: boolean
    uri?: boolean
    http_version?: boolean
    host?: boolean
    user_agent?: boolean
    request_headers?: boolean
    request_body?: boolean
    response_headers?: boolean
    response_body?: boolean
    matched_rules?: boolean
    audit_summary?: boolean
    full_log?: boolean
    created_at?: boolean
    sessionId?: boolean
  }

  export type RawLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    session?: boolean | RawLog$sessionArgs<ExtArgs>
  }
  export type RawLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    session?: boolean | RawLog$sessionArgs<ExtArgs>
  }

  export type $RawLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RawLog"
    objects: {
      session: Prisma.$SessionPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      transaction_id: string
      timestamp: Date
      remote_host: string | null
      remote_port: number | null
      local_host: string | null
      local_port: number | null
      method: string | null
      uri: string | null
      http_version: string | null
      host: string | null
      user_agent: string | null
      request_headers: Prisma.JsonValue | null
      request_body: string | null
      response_headers: Prisma.JsonValue | null
      response_body: string | null
      matched_rules: Prisma.JsonValue | null
      audit_summary: Prisma.JsonValue | null
      full_log: Prisma.JsonValue
      created_at: Date
      sessionId: number | null
    }, ExtArgs["result"]["rawLog"]>
    composites: {}
  }

  type RawLogGetPayload<S extends boolean | null | undefined | RawLogDefaultArgs> = $Result.GetResult<Prisma.$RawLogPayload, S>

  type RawLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RawLogFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RawLogCountAggregateInputType | true
    }

  export interface RawLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RawLog'], meta: { name: 'RawLog' } }
    /**
     * Find zero or one RawLog that matches the filter.
     * @param {RawLogFindUniqueArgs} args - Arguments to find a RawLog
     * @example
     * // Get one RawLog
     * const rawLog = await prisma.rawLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RawLogFindUniqueArgs>(args: SelectSubset<T, RawLogFindUniqueArgs<ExtArgs>>): Prisma__RawLogClient<$Result.GetResult<Prisma.$RawLogPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one RawLog that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RawLogFindUniqueOrThrowArgs} args - Arguments to find a RawLog
     * @example
     * // Get one RawLog
     * const rawLog = await prisma.rawLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RawLogFindUniqueOrThrowArgs>(args: SelectSubset<T, RawLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RawLogClient<$Result.GetResult<Prisma.$RawLogPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first RawLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RawLogFindFirstArgs} args - Arguments to find a RawLog
     * @example
     * // Get one RawLog
     * const rawLog = await prisma.rawLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RawLogFindFirstArgs>(args?: SelectSubset<T, RawLogFindFirstArgs<ExtArgs>>): Prisma__RawLogClient<$Result.GetResult<Prisma.$RawLogPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first RawLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RawLogFindFirstOrThrowArgs} args - Arguments to find a RawLog
     * @example
     * // Get one RawLog
     * const rawLog = await prisma.rawLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RawLogFindFirstOrThrowArgs>(args?: SelectSubset<T, RawLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__RawLogClient<$Result.GetResult<Prisma.$RawLogPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more RawLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RawLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RawLogs
     * const rawLogs = await prisma.rawLog.findMany()
     * 
     * // Get first 10 RawLogs
     * const rawLogs = await prisma.rawLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const rawLogWithIdOnly = await prisma.rawLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RawLogFindManyArgs>(args?: SelectSubset<T, RawLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RawLogPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a RawLog.
     * @param {RawLogCreateArgs} args - Arguments to create a RawLog.
     * @example
     * // Create one RawLog
     * const RawLog = await prisma.rawLog.create({
     *   data: {
     *     // ... data to create a RawLog
     *   }
     * })
     * 
     */
    create<T extends RawLogCreateArgs>(args: SelectSubset<T, RawLogCreateArgs<ExtArgs>>): Prisma__RawLogClient<$Result.GetResult<Prisma.$RawLogPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many RawLogs.
     * @param {RawLogCreateManyArgs} args - Arguments to create many RawLogs.
     * @example
     * // Create many RawLogs
     * const rawLog = await prisma.rawLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RawLogCreateManyArgs>(args?: SelectSubset<T, RawLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RawLogs and returns the data saved in the database.
     * @param {RawLogCreateManyAndReturnArgs} args - Arguments to create many RawLogs.
     * @example
     * // Create many RawLogs
     * const rawLog = await prisma.rawLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RawLogs and only return the `id`
     * const rawLogWithIdOnly = await prisma.rawLog.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RawLogCreateManyAndReturnArgs>(args?: SelectSubset<T, RawLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RawLogPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a RawLog.
     * @param {RawLogDeleteArgs} args - Arguments to delete one RawLog.
     * @example
     * // Delete one RawLog
     * const RawLog = await prisma.rawLog.delete({
     *   where: {
     *     // ... filter to delete one RawLog
     *   }
     * })
     * 
     */
    delete<T extends RawLogDeleteArgs>(args: SelectSubset<T, RawLogDeleteArgs<ExtArgs>>): Prisma__RawLogClient<$Result.GetResult<Prisma.$RawLogPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one RawLog.
     * @param {RawLogUpdateArgs} args - Arguments to update one RawLog.
     * @example
     * // Update one RawLog
     * const rawLog = await prisma.rawLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RawLogUpdateArgs>(args: SelectSubset<T, RawLogUpdateArgs<ExtArgs>>): Prisma__RawLogClient<$Result.GetResult<Prisma.$RawLogPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more RawLogs.
     * @param {RawLogDeleteManyArgs} args - Arguments to filter RawLogs to delete.
     * @example
     * // Delete a few RawLogs
     * const { count } = await prisma.rawLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RawLogDeleteManyArgs>(args?: SelectSubset<T, RawLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RawLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RawLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RawLogs
     * const rawLog = await prisma.rawLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RawLogUpdateManyArgs>(args: SelectSubset<T, RawLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RawLog.
     * @param {RawLogUpsertArgs} args - Arguments to update or create a RawLog.
     * @example
     * // Update or create a RawLog
     * const rawLog = await prisma.rawLog.upsert({
     *   create: {
     *     // ... data to create a RawLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RawLog we want to update
     *   }
     * })
     */
    upsert<T extends RawLogUpsertArgs>(args: SelectSubset<T, RawLogUpsertArgs<ExtArgs>>): Prisma__RawLogClient<$Result.GetResult<Prisma.$RawLogPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of RawLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RawLogCountArgs} args - Arguments to filter RawLogs to count.
     * @example
     * // Count the number of RawLogs
     * const count = await prisma.rawLog.count({
     *   where: {
     *     // ... the filter for the RawLogs we want to count
     *   }
     * })
    **/
    count<T extends RawLogCountArgs>(
      args?: Subset<T, RawLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RawLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RawLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RawLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RawLogAggregateArgs>(args: Subset<T, RawLogAggregateArgs>): Prisma.PrismaPromise<GetRawLogAggregateType<T>>

    /**
     * Group by RawLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RawLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RawLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RawLogGroupByArgs['orderBy'] }
        : { orderBy?: RawLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RawLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRawLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RawLog model
   */
  readonly fields: RawLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RawLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RawLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    session<T extends RawLog$sessionArgs<ExtArgs> = {}>(args?: Subset<T, RawLog$sessionArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RawLog model
   */ 
  interface RawLogFieldRefs {
    readonly id: FieldRef<"RawLog", 'Int'>
    readonly transaction_id: FieldRef<"RawLog", 'String'>
    readonly timestamp: FieldRef<"RawLog", 'DateTime'>
    readonly remote_host: FieldRef<"RawLog", 'String'>
    readonly remote_port: FieldRef<"RawLog", 'Int'>
    readonly local_host: FieldRef<"RawLog", 'String'>
    readonly local_port: FieldRef<"RawLog", 'Int'>
    readonly method: FieldRef<"RawLog", 'String'>
    readonly uri: FieldRef<"RawLog", 'String'>
    readonly http_version: FieldRef<"RawLog", 'String'>
    readonly host: FieldRef<"RawLog", 'String'>
    readonly user_agent: FieldRef<"RawLog", 'String'>
    readonly request_headers: FieldRef<"RawLog", 'Json'>
    readonly request_body: FieldRef<"RawLog", 'String'>
    readonly response_headers: FieldRef<"RawLog", 'Json'>
    readonly response_body: FieldRef<"RawLog", 'String'>
    readonly matched_rules: FieldRef<"RawLog", 'Json'>
    readonly audit_summary: FieldRef<"RawLog", 'Json'>
    readonly full_log: FieldRef<"RawLog", 'Json'>
    readonly created_at: FieldRef<"RawLog", 'DateTime'>
    readonly sessionId: FieldRef<"RawLog", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * RawLog findUnique
   */
  export type RawLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RawLog
     */
    select?: RawLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RawLogInclude<ExtArgs> | null
    /**
     * Filter, which RawLog to fetch.
     */
    where: RawLogWhereUniqueInput
  }

  /**
   * RawLog findUniqueOrThrow
   */
  export type RawLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RawLog
     */
    select?: RawLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RawLogInclude<ExtArgs> | null
    /**
     * Filter, which RawLog to fetch.
     */
    where: RawLogWhereUniqueInput
  }

  /**
   * RawLog findFirst
   */
  export type RawLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RawLog
     */
    select?: RawLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RawLogInclude<ExtArgs> | null
    /**
     * Filter, which RawLog to fetch.
     */
    where?: RawLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RawLogs to fetch.
     */
    orderBy?: RawLogOrderByWithRelationInput | RawLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RawLogs.
     */
    cursor?: RawLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RawLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RawLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RawLogs.
     */
    distinct?: RawLogScalarFieldEnum | RawLogScalarFieldEnum[]
  }

  /**
   * RawLog findFirstOrThrow
   */
  export type RawLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RawLog
     */
    select?: RawLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RawLogInclude<ExtArgs> | null
    /**
     * Filter, which RawLog to fetch.
     */
    where?: RawLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RawLogs to fetch.
     */
    orderBy?: RawLogOrderByWithRelationInput | RawLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RawLogs.
     */
    cursor?: RawLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RawLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RawLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RawLogs.
     */
    distinct?: RawLogScalarFieldEnum | RawLogScalarFieldEnum[]
  }

  /**
   * RawLog findMany
   */
  export type RawLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RawLog
     */
    select?: RawLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RawLogInclude<ExtArgs> | null
    /**
     * Filter, which RawLogs to fetch.
     */
    where?: RawLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RawLogs to fetch.
     */
    orderBy?: RawLogOrderByWithRelationInput | RawLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RawLogs.
     */
    cursor?: RawLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RawLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RawLogs.
     */
    skip?: number
    distinct?: RawLogScalarFieldEnum | RawLogScalarFieldEnum[]
  }

  /**
   * RawLog create
   */
  export type RawLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RawLog
     */
    select?: RawLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RawLogInclude<ExtArgs> | null
    /**
     * The data needed to create a RawLog.
     */
    data: XOR<RawLogCreateInput, RawLogUncheckedCreateInput>
  }

  /**
   * RawLog createMany
   */
  export type RawLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RawLogs.
     */
    data: RawLogCreateManyInput | RawLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RawLog createManyAndReturn
   */
  export type RawLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RawLog
     */
    select?: RawLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many RawLogs.
     */
    data: RawLogCreateManyInput | RawLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RawLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RawLog update
   */
  export type RawLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RawLog
     */
    select?: RawLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RawLogInclude<ExtArgs> | null
    /**
     * The data needed to update a RawLog.
     */
    data: XOR<RawLogUpdateInput, RawLogUncheckedUpdateInput>
    /**
     * Choose, which RawLog to update.
     */
    where: RawLogWhereUniqueInput
  }

  /**
   * RawLog updateMany
   */
  export type RawLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RawLogs.
     */
    data: XOR<RawLogUpdateManyMutationInput, RawLogUncheckedUpdateManyInput>
    /**
     * Filter which RawLogs to update
     */
    where?: RawLogWhereInput
  }

  /**
   * RawLog upsert
   */
  export type RawLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RawLog
     */
    select?: RawLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RawLogInclude<ExtArgs> | null
    /**
     * The filter to search for the RawLog to update in case it exists.
     */
    where: RawLogWhereUniqueInput
    /**
     * In case the RawLog found by the `where` argument doesn't exist, create a new RawLog with this data.
     */
    create: XOR<RawLogCreateInput, RawLogUncheckedCreateInput>
    /**
     * In case the RawLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RawLogUpdateInput, RawLogUncheckedUpdateInput>
  }

  /**
   * RawLog delete
   */
  export type RawLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RawLog
     */
    select?: RawLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RawLogInclude<ExtArgs> | null
    /**
     * Filter which RawLog to delete.
     */
    where: RawLogWhereUniqueInput
  }

  /**
   * RawLog deleteMany
   */
  export type RawLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RawLogs to delete
     */
    where?: RawLogWhereInput
  }

  /**
   * RawLog.session
   */
  export type RawLog$sessionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    where?: SessionWhereInput
  }

  /**
   * RawLog without action
   */
  export type RawLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RawLog
     */
    select?: RawLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RawLogInclude<ExtArgs> | null
  }


  /**
   * Model Session
   */

  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _avg: SessionAvgAggregateOutputType | null
    _sum: SessionSumAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionAvgAggregateOutputType = {
    id: number | null
  }

  export type SessionSumAggregateOutputType = {
    id: number | null
  }

  export type SessionMinAggregateOutputType = {
    id: number | null
    session_id: string | null
    ip_address: string | null
    user_agent: string | null
    start_time: Date | null
    end_time: Date | null
    created_at: Date | null
    label: $Enums.sessionLabel | null
  }

  export type SessionMaxAggregateOutputType = {
    id: number | null
    session_id: string | null
    ip_address: string | null
    user_agent: string | null
    start_time: Date | null
    end_time: Date | null
    created_at: Date | null
    label: $Enums.sessionLabel | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    session_id: number
    ip_address: number
    user_agent: number
    start_time: number
    end_time: number
    created_at: number
    label: number
    _all: number
  }


  export type SessionAvgAggregateInputType = {
    id?: true
  }

  export type SessionSumAggregateInputType = {
    id?: true
  }

  export type SessionMinAggregateInputType = {
    id?: true
    session_id?: true
    ip_address?: true
    user_agent?: true
    start_time?: true
    end_time?: true
    created_at?: true
    label?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    session_id?: true
    ip_address?: true
    user_agent?: true
    start_time?: true
    end_time?: true
    created_at?: true
    label?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    session_id?: true
    ip_address?: true
    user_agent?: true
    start_time?: true
    end_time?: true
    created_at?: true
    label?: true
    _all?: true
  }

  export type SessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SessionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SessionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithAggregationInput | SessionOrderByWithAggregationInput[]
    by: SessionScalarFieldEnum[] | SessionScalarFieldEnum
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _avg?: SessionAvgAggregateInputType
    _sum?: SessionSumAggregateInputType
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }

  export type SessionGroupByOutputType = {
    id: number
    session_id: string
    ip_address: string | null
    user_agent: string | null
    start_time: Date
    end_time: Date
    created_at: Date
    label: $Enums.sessionLabel | null
    _count: SessionCountAggregateOutputType | null
    _avg: SessionAvgAggregateOutputType | null
    _sum: SessionSumAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    session_id?: boolean
    ip_address?: boolean
    user_agent?: boolean
    start_time?: boolean
    end_time?: boolean
    created_at?: boolean
    label?: boolean
    rawLogs?: boolean | Session$rawLogsArgs<ExtArgs>
    _count?: boolean | SessionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    session_id?: boolean
    ip_address?: boolean
    user_agent?: boolean
    start_time?: boolean
    end_time?: boolean
    created_at?: boolean
    label?: boolean
  }, ExtArgs["result"]["session"]>

  export type SessionSelectScalar = {
    id?: boolean
    session_id?: boolean
    ip_address?: boolean
    user_agent?: boolean
    start_time?: boolean
    end_time?: boolean
    created_at?: boolean
    label?: boolean
  }

  export type SessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rawLogs?: boolean | Session$rawLogsArgs<ExtArgs>
    _count?: boolean | SessionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $SessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Session"
    objects: {
      rawLogs: Prisma.$RawLogPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      session_id: string
      ip_address: string | null
      user_agent: string | null
      start_time: Date
      end_time: Date
      created_at: Date
      label: $Enums.sessionLabel | null
    }, ExtArgs["result"]["session"]>
    composites: {}
  }

  type SessionGetPayload<S extends boolean | null | undefined | SessionDefaultArgs> = $Result.GetResult<Prisma.$SessionPayload, S>

  type SessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SessionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Session'], meta: { name: 'Session' } }
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SessionFindUniqueArgs>(args: SelectSubset<T, SessionFindUniqueArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Session that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs>(args: SelectSubset<T, SessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SessionFindFirstArgs>(args?: SelectSubset<T, SessionFindFirstArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Session that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs>(args?: SelectSubset<T, SessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SessionFindManyArgs>(args?: SelectSubset<T, SessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
     */
    create<T extends SessionCreateArgs>(args: SelectSubset<T, SessionCreateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Sessions.
     * @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SessionCreateManyArgs>(args?: SelectSubset<T, SessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sessions and returns the data saved in the database.
     * @param {SessionCreateManyAndReturnArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SessionCreateManyAndReturnArgs>(args?: SelectSubset<T, SessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
     */
    delete<T extends SessionDeleteArgs>(args: SelectSubset<T, SessionDeleteArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SessionUpdateArgs>(args: SelectSubset<T, SessionUpdateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SessionDeleteManyArgs>(args?: SelectSubset<T, SessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SessionUpdateManyArgs>(args: SelectSubset<T, SessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
     */
    upsert<T extends SessionUpsertArgs>(args: SelectSubset<T, SessionUpsertArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Session model
   */
  readonly fields: SessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    rawLogs<T extends Session$rawLogsArgs<ExtArgs> = {}>(args?: Subset<T, Session$rawLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RawLogPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Session model
   */ 
  interface SessionFieldRefs {
    readonly id: FieldRef<"Session", 'Int'>
    readonly session_id: FieldRef<"Session", 'String'>
    readonly ip_address: FieldRef<"Session", 'String'>
    readonly user_agent: FieldRef<"Session", 'String'>
    readonly start_time: FieldRef<"Session", 'DateTime'>
    readonly end_time: FieldRef<"Session", 'DateTime'>
    readonly created_at: FieldRef<"Session", 'DateTime'>
    readonly label: FieldRef<"Session", 'sessionLabel'>
  }
    

  // Custom InputTypes
  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findMany
   */
  export type SessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session create
   */
  export type SessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }

  /**
   * Session createMany
   */
  export type SessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Session createManyAndReturn
   */
  export type SessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Session update
   */
  export type SessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
  }

  /**
   * Session upsert
   */
  export type SessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }

  /**
   * Session delete
   */
  export type SessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
  }

  /**
   * Session.rawLogs
   */
  export type Session$rawLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RawLog
     */
    select?: RawLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RawLogInclude<ExtArgs> | null
    where?: RawLogWhereInput
    orderBy?: RawLogOrderByWithRelationInput | RawLogOrderByWithRelationInput[]
    cursor?: RawLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RawLogScalarFieldEnum | RawLogScalarFieldEnum[]
  }

  /**
   * Session without action
   */
  export type SessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
  }


  /**
   * Model Rule
   */

  export type AggregateRule = {
    _count: RuleCountAggregateOutputType | null
    _avg: RuleAvgAggregateOutputType | null
    _sum: RuleSumAggregateOutputType | null
    _min: RuleMinAggregateOutputType | null
    _max: RuleMaxAggregateOutputType | null
  }

  export type RuleAvgAggregateOutputType = {
    id: number | null
    rule_id: number | null
    phase: number | null
  }

  export type RuleSumAggregateOutputType = {
    id: number | null
    rule_id: number | null
    phase: number | null
  }

  export type RuleMinAggregateOutputType = {
    id: number | null
    rule_id: number | null
    created_at: Date | null
    rule_name: string | null
    target: string | null
    operator: string | null
    phase: number | null
    action: string | null
    transformation: string | null
    severity_level: string | null
    logdata: string | null
  }

  export type RuleMaxAggregateOutputType = {
    id: number | null
    rule_id: number | null
    created_at: Date | null
    rule_name: string | null
    target: string | null
    operator: string | null
    phase: number | null
    action: string | null
    transformation: string | null
    severity_level: string | null
    logdata: string | null
  }

  export type RuleCountAggregateOutputType = {
    id: number
    rule_id: number
    created_at: number
    rule_name: number
    target: number
    operator: number
    phase: number
    action: number
    transformation: number
    severity_level: number
    logdata: number
    rule_template: number
    _all: number
  }


  export type RuleAvgAggregateInputType = {
    id?: true
    rule_id?: true
    phase?: true
  }

  export type RuleSumAggregateInputType = {
    id?: true
    rule_id?: true
    phase?: true
  }

  export type RuleMinAggregateInputType = {
    id?: true
    rule_id?: true
    created_at?: true
    rule_name?: true
    target?: true
    operator?: true
    phase?: true
    action?: true
    transformation?: true
    severity_level?: true
    logdata?: true
  }

  export type RuleMaxAggregateInputType = {
    id?: true
    rule_id?: true
    created_at?: true
    rule_name?: true
    target?: true
    operator?: true
    phase?: true
    action?: true
    transformation?: true
    severity_level?: true
    logdata?: true
  }

  export type RuleCountAggregateInputType = {
    id?: true
    rule_id?: true
    created_at?: true
    rule_name?: true
    target?: true
    operator?: true
    phase?: true
    action?: true
    transformation?: true
    severity_level?: true
    logdata?: true
    rule_template?: true
    _all?: true
  }

  export type RuleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Rule to aggregate.
     */
    where?: RuleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rules to fetch.
     */
    orderBy?: RuleOrderByWithRelationInput | RuleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RuleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Rules
    **/
    _count?: true | RuleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RuleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RuleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RuleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RuleMaxAggregateInputType
  }

  export type GetRuleAggregateType<T extends RuleAggregateArgs> = {
        [P in keyof T & keyof AggregateRule]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRule[P]>
      : GetScalarType<T[P], AggregateRule[P]>
  }




  export type RuleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RuleWhereInput
    orderBy?: RuleOrderByWithAggregationInput | RuleOrderByWithAggregationInput[]
    by: RuleScalarFieldEnum[] | RuleScalarFieldEnum
    having?: RuleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RuleCountAggregateInputType | true
    _avg?: RuleAvgAggregateInputType
    _sum?: RuleSumAggregateInputType
    _min?: RuleMinAggregateInputType
    _max?: RuleMaxAggregateInputType
  }

  export type RuleGroupByOutputType = {
    id: number
    rule_id: number
    created_at: Date
    rule_name: string
    target: string
    operator: string
    phase: number
    action: string
    transformation: string | null
    severity_level: string
    logdata: string | null
    rule_template: JsonValue
    _count: RuleCountAggregateOutputType | null
    _avg: RuleAvgAggregateOutputType | null
    _sum: RuleSumAggregateOutputType | null
    _min: RuleMinAggregateOutputType | null
    _max: RuleMaxAggregateOutputType | null
  }

  type GetRuleGroupByPayload<T extends RuleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RuleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RuleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RuleGroupByOutputType[P]>
            : GetScalarType<T[P], RuleGroupByOutputType[P]>
        }
      >
    >


  export type RuleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    rule_id?: boolean
    created_at?: boolean
    rule_name?: boolean
    target?: boolean
    operator?: boolean
    phase?: boolean
    action?: boolean
    transformation?: boolean
    severity_level?: boolean
    logdata?: boolean
    rule_template?: boolean
  }, ExtArgs["result"]["rule"]>

  export type RuleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    rule_id?: boolean
    created_at?: boolean
    rule_name?: boolean
    target?: boolean
    operator?: boolean
    phase?: boolean
    action?: boolean
    transformation?: boolean
    severity_level?: boolean
    logdata?: boolean
    rule_template?: boolean
  }, ExtArgs["result"]["rule"]>

  export type RuleSelectScalar = {
    id?: boolean
    rule_id?: boolean
    created_at?: boolean
    rule_name?: boolean
    target?: boolean
    operator?: boolean
    phase?: boolean
    action?: boolean
    transformation?: boolean
    severity_level?: boolean
    logdata?: boolean
    rule_template?: boolean
  }


  export type $RulePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Rule"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      rule_id: number
      created_at: Date
      rule_name: string
      target: string
      operator: string
      phase: number
      action: string
      transformation: string | null
      severity_level: string
      logdata: string | null
      rule_template: Prisma.JsonValue
    }, ExtArgs["result"]["rule"]>
    composites: {}
  }

  type RuleGetPayload<S extends boolean | null | undefined | RuleDefaultArgs> = $Result.GetResult<Prisma.$RulePayload, S>

  type RuleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RuleFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RuleCountAggregateInputType | true
    }

  export interface RuleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Rule'], meta: { name: 'Rule' } }
    /**
     * Find zero or one Rule that matches the filter.
     * @param {RuleFindUniqueArgs} args - Arguments to find a Rule
     * @example
     * // Get one Rule
     * const rule = await prisma.rule.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RuleFindUniqueArgs>(args: SelectSubset<T, RuleFindUniqueArgs<ExtArgs>>): Prisma__RuleClient<$Result.GetResult<Prisma.$RulePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Rule that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RuleFindUniqueOrThrowArgs} args - Arguments to find a Rule
     * @example
     * // Get one Rule
     * const rule = await prisma.rule.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RuleFindUniqueOrThrowArgs>(args: SelectSubset<T, RuleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RuleClient<$Result.GetResult<Prisma.$RulePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Rule that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RuleFindFirstArgs} args - Arguments to find a Rule
     * @example
     * // Get one Rule
     * const rule = await prisma.rule.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RuleFindFirstArgs>(args?: SelectSubset<T, RuleFindFirstArgs<ExtArgs>>): Prisma__RuleClient<$Result.GetResult<Prisma.$RulePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Rule that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RuleFindFirstOrThrowArgs} args - Arguments to find a Rule
     * @example
     * // Get one Rule
     * const rule = await prisma.rule.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RuleFindFirstOrThrowArgs>(args?: SelectSubset<T, RuleFindFirstOrThrowArgs<ExtArgs>>): Prisma__RuleClient<$Result.GetResult<Prisma.$RulePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Rules that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RuleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Rules
     * const rules = await prisma.rule.findMany()
     * 
     * // Get first 10 Rules
     * const rules = await prisma.rule.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ruleWithIdOnly = await prisma.rule.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RuleFindManyArgs>(args?: SelectSubset<T, RuleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RulePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Rule.
     * @param {RuleCreateArgs} args - Arguments to create a Rule.
     * @example
     * // Create one Rule
     * const Rule = await prisma.rule.create({
     *   data: {
     *     // ... data to create a Rule
     *   }
     * })
     * 
     */
    create<T extends RuleCreateArgs>(args: SelectSubset<T, RuleCreateArgs<ExtArgs>>): Prisma__RuleClient<$Result.GetResult<Prisma.$RulePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Rules.
     * @param {RuleCreateManyArgs} args - Arguments to create many Rules.
     * @example
     * // Create many Rules
     * const rule = await prisma.rule.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RuleCreateManyArgs>(args?: SelectSubset<T, RuleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Rules and returns the data saved in the database.
     * @param {RuleCreateManyAndReturnArgs} args - Arguments to create many Rules.
     * @example
     * // Create many Rules
     * const rule = await prisma.rule.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Rules and only return the `id`
     * const ruleWithIdOnly = await prisma.rule.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RuleCreateManyAndReturnArgs>(args?: SelectSubset<T, RuleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RulePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Rule.
     * @param {RuleDeleteArgs} args - Arguments to delete one Rule.
     * @example
     * // Delete one Rule
     * const Rule = await prisma.rule.delete({
     *   where: {
     *     // ... filter to delete one Rule
     *   }
     * })
     * 
     */
    delete<T extends RuleDeleteArgs>(args: SelectSubset<T, RuleDeleteArgs<ExtArgs>>): Prisma__RuleClient<$Result.GetResult<Prisma.$RulePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Rule.
     * @param {RuleUpdateArgs} args - Arguments to update one Rule.
     * @example
     * // Update one Rule
     * const rule = await prisma.rule.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RuleUpdateArgs>(args: SelectSubset<T, RuleUpdateArgs<ExtArgs>>): Prisma__RuleClient<$Result.GetResult<Prisma.$RulePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Rules.
     * @param {RuleDeleteManyArgs} args - Arguments to filter Rules to delete.
     * @example
     * // Delete a few Rules
     * const { count } = await prisma.rule.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RuleDeleteManyArgs>(args?: SelectSubset<T, RuleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Rules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RuleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Rules
     * const rule = await prisma.rule.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RuleUpdateManyArgs>(args: SelectSubset<T, RuleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Rule.
     * @param {RuleUpsertArgs} args - Arguments to update or create a Rule.
     * @example
     * // Update or create a Rule
     * const rule = await prisma.rule.upsert({
     *   create: {
     *     // ... data to create a Rule
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Rule we want to update
     *   }
     * })
     */
    upsert<T extends RuleUpsertArgs>(args: SelectSubset<T, RuleUpsertArgs<ExtArgs>>): Prisma__RuleClient<$Result.GetResult<Prisma.$RulePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Rules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RuleCountArgs} args - Arguments to filter Rules to count.
     * @example
     * // Count the number of Rules
     * const count = await prisma.rule.count({
     *   where: {
     *     // ... the filter for the Rules we want to count
     *   }
     * })
    **/
    count<T extends RuleCountArgs>(
      args?: Subset<T, RuleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RuleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Rule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RuleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RuleAggregateArgs>(args: Subset<T, RuleAggregateArgs>): Prisma.PrismaPromise<GetRuleAggregateType<T>>

    /**
     * Group by Rule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RuleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RuleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RuleGroupByArgs['orderBy'] }
        : { orderBy?: RuleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RuleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRuleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Rule model
   */
  readonly fields: RuleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Rule.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RuleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Rule model
   */ 
  interface RuleFieldRefs {
    readonly id: FieldRef<"Rule", 'Int'>
    readonly rule_id: FieldRef<"Rule", 'Int'>
    readonly created_at: FieldRef<"Rule", 'DateTime'>
    readonly rule_name: FieldRef<"Rule", 'String'>
    readonly target: FieldRef<"Rule", 'String'>
    readonly operator: FieldRef<"Rule", 'String'>
    readonly phase: FieldRef<"Rule", 'Int'>
    readonly action: FieldRef<"Rule", 'String'>
    readonly transformation: FieldRef<"Rule", 'String'>
    readonly severity_level: FieldRef<"Rule", 'String'>
    readonly logdata: FieldRef<"Rule", 'String'>
    readonly rule_template: FieldRef<"Rule", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * Rule findUnique
   */
  export type RuleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rule
     */
    select?: RuleSelect<ExtArgs> | null
    /**
     * Filter, which Rule to fetch.
     */
    where: RuleWhereUniqueInput
  }

  /**
   * Rule findUniqueOrThrow
   */
  export type RuleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rule
     */
    select?: RuleSelect<ExtArgs> | null
    /**
     * Filter, which Rule to fetch.
     */
    where: RuleWhereUniqueInput
  }

  /**
   * Rule findFirst
   */
  export type RuleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rule
     */
    select?: RuleSelect<ExtArgs> | null
    /**
     * Filter, which Rule to fetch.
     */
    where?: RuleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rules to fetch.
     */
    orderBy?: RuleOrderByWithRelationInput | RuleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Rules.
     */
    cursor?: RuleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Rules.
     */
    distinct?: RuleScalarFieldEnum | RuleScalarFieldEnum[]
  }

  /**
   * Rule findFirstOrThrow
   */
  export type RuleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rule
     */
    select?: RuleSelect<ExtArgs> | null
    /**
     * Filter, which Rule to fetch.
     */
    where?: RuleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rules to fetch.
     */
    orderBy?: RuleOrderByWithRelationInput | RuleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Rules.
     */
    cursor?: RuleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Rules.
     */
    distinct?: RuleScalarFieldEnum | RuleScalarFieldEnum[]
  }

  /**
   * Rule findMany
   */
  export type RuleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rule
     */
    select?: RuleSelect<ExtArgs> | null
    /**
     * Filter, which Rules to fetch.
     */
    where?: RuleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Rules to fetch.
     */
    orderBy?: RuleOrderByWithRelationInput | RuleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Rules.
     */
    cursor?: RuleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Rules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Rules.
     */
    skip?: number
    distinct?: RuleScalarFieldEnum | RuleScalarFieldEnum[]
  }

  /**
   * Rule create
   */
  export type RuleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rule
     */
    select?: RuleSelect<ExtArgs> | null
    /**
     * The data needed to create a Rule.
     */
    data: XOR<RuleCreateInput, RuleUncheckedCreateInput>
  }

  /**
   * Rule createMany
   */
  export type RuleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Rules.
     */
    data: RuleCreateManyInput | RuleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Rule createManyAndReturn
   */
  export type RuleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rule
     */
    select?: RuleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Rules.
     */
    data: RuleCreateManyInput | RuleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Rule update
   */
  export type RuleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rule
     */
    select?: RuleSelect<ExtArgs> | null
    /**
     * The data needed to update a Rule.
     */
    data: XOR<RuleUpdateInput, RuleUncheckedUpdateInput>
    /**
     * Choose, which Rule to update.
     */
    where: RuleWhereUniqueInput
  }

  /**
   * Rule updateMany
   */
  export type RuleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Rules.
     */
    data: XOR<RuleUpdateManyMutationInput, RuleUncheckedUpdateManyInput>
    /**
     * Filter which Rules to update
     */
    where?: RuleWhereInput
  }

  /**
   * Rule upsert
   */
  export type RuleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rule
     */
    select?: RuleSelect<ExtArgs> | null
    /**
     * The filter to search for the Rule to update in case it exists.
     */
    where: RuleWhereUniqueInput
    /**
     * In case the Rule found by the `where` argument doesn't exist, create a new Rule with this data.
     */
    create: XOR<RuleCreateInput, RuleUncheckedCreateInput>
    /**
     * In case the Rule was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RuleUpdateInput, RuleUncheckedUpdateInput>
  }

  /**
   * Rule delete
   */
  export type RuleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rule
     */
    select?: RuleSelect<ExtArgs> | null
    /**
     * Filter which Rule to delete.
     */
    where: RuleWhereUniqueInput
  }

  /**
   * Rule deleteMany
   */
  export type RuleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Rules to delete
     */
    where?: RuleWhereInput
  }

  /**
   * Rule without action
   */
  export type RuleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Rule
     */
    select?: RuleSelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const RawLogScalarFieldEnum: {
    id: 'id',
    transaction_id: 'transaction_id',
    timestamp: 'timestamp',
    remote_host: 'remote_host',
    remote_port: 'remote_port',
    local_host: 'local_host',
    local_port: 'local_port',
    method: 'method',
    uri: 'uri',
    http_version: 'http_version',
    host: 'host',
    user_agent: 'user_agent',
    request_headers: 'request_headers',
    request_body: 'request_body',
    response_headers: 'response_headers',
    response_body: 'response_body',
    matched_rules: 'matched_rules',
    audit_summary: 'audit_summary',
    full_log: 'full_log',
    created_at: 'created_at',
    sessionId: 'sessionId'
  };

  export type RawLogScalarFieldEnum = (typeof RawLogScalarFieldEnum)[keyof typeof RawLogScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    session_id: 'session_id',
    ip_address: 'ip_address',
    user_agent: 'user_agent',
    start_time: 'start_time',
    end_time: 'end_time',
    created_at: 'created_at',
    label: 'label'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const RuleScalarFieldEnum: {
    id: 'id',
    rule_id: 'rule_id',
    created_at: 'created_at',
    rule_name: 'rule_name',
    target: 'target',
    operator: 'operator',
    phase: 'phase',
    action: 'action',
    transformation: 'transformation',
    severity_level: 'severity_level',
    logdata: 'logdata',
    rule_template: 'rule_template'
  };

  export type RuleScalarFieldEnum = (typeof RuleScalarFieldEnum)[keyof typeof RuleScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'sessionLabel'
   */
  export type EnumsessionLabelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'sessionLabel'>
    


  /**
   * Reference to a field of type 'sessionLabel[]'
   */
  export type ListEnumsessionLabelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'sessionLabel[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type RawLogWhereInput = {
    AND?: RawLogWhereInput | RawLogWhereInput[]
    OR?: RawLogWhereInput[]
    NOT?: RawLogWhereInput | RawLogWhereInput[]
    id?: IntFilter<"RawLog"> | number
    transaction_id?: StringFilter<"RawLog"> | string
    timestamp?: DateTimeFilter<"RawLog"> | Date | string
    remote_host?: StringNullableFilter<"RawLog"> | string | null
    remote_port?: IntNullableFilter<"RawLog"> | number | null
    local_host?: StringNullableFilter<"RawLog"> | string | null
    local_port?: IntNullableFilter<"RawLog"> | number | null
    method?: StringNullableFilter<"RawLog"> | string | null
    uri?: StringNullableFilter<"RawLog"> | string | null
    http_version?: StringNullableFilter<"RawLog"> | string | null
    host?: StringNullableFilter<"RawLog"> | string | null
    user_agent?: StringNullableFilter<"RawLog"> | string | null
    request_headers?: JsonNullableFilter<"RawLog">
    request_body?: StringNullableFilter<"RawLog"> | string | null
    response_headers?: JsonNullableFilter<"RawLog">
    response_body?: StringNullableFilter<"RawLog"> | string | null
    matched_rules?: JsonNullableFilter<"RawLog">
    audit_summary?: JsonNullableFilter<"RawLog">
    full_log?: JsonFilter<"RawLog">
    created_at?: DateTimeFilter<"RawLog"> | Date | string
    sessionId?: IntNullableFilter<"RawLog"> | number | null
    session?: XOR<SessionNullableRelationFilter, SessionWhereInput> | null
  }

  export type RawLogOrderByWithRelationInput = {
    id?: SortOrder
    transaction_id?: SortOrder
    timestamp?: SortOrder
    remote_host?: SortOrderInput | SortOrder
    remote_port?: SortOrderInput | SortOrder
    local_host?: SortOrderInput | SortOrder
    local_port?: SortOrderInput | SortOrder
    method?: SortOrderInput | SortOrder
    uri?: SortOrderInput | SortOrder
    http_version?: SortOrderInput | SortOrder
    host?: SortOrderInput | SortOrder
    user_agent?: SortOrderInput | SortOrder
    request_headers?: SortOrderInput | SortOrder
    request_body?: SortOrderInput | SortOrder
    response_headers?: SortOrderInput | SortOrder
    response_body?: SortOrderInput | SortOrder
    matched_rules?: SortOrderInput | SortOrder
    audit_summary?: SortOrderInput | SortOrder
    full_log?: SortOrder
    created_at?: SortOrder
    sessionId?: SortOrderInput | SortOrder
    session?: SessionOrderByWithRelationInput
  }

  export type RawLogWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    transaction_id?: string
    AND?: RawLogWhereInput | RawLogWhereInput[]
    OR?: RawLogWhereInput[]
    NOT?: RawLogWhereInput | RawLogWhereInput[]
    timestamp?: DateTimeFilter<"RawLog"> | Date | string
    remote_host?: StringNullableFilter<"RawLog"> | string | null
    remote_port?: IntNullableFilter<"RawLog"> | number | null
    local_host?: StringNullableFilter<"RawLog"> | string | null
    local_port?: IntNullableFilter<"RawLog"> | number | null
    method?: StringNullableFilter<"RawLog"> | string | null
    uri?: StringNullableFilter<"RawLog"> | string | null
    http_version?: StringNullableFilter<"RawLog"> | string | null
    host?: StringNullableFilter<"RawLog"> | string | null
    user_agent?: StringNullableFilter<"RawLog"> | string | null
    request_headers?: JsonNullableFilter<"RawLog">
    request_body?: StringNullableFilter<"RawLog"> | string | null
    response_headers?: JsonNullableFilter<"RawLog">
    response_body?: StringNullableFilter<"RawLog"> | string | null
    matched_rules?: JsonNullableFilter<"RawLog">
    audit_summary?: JsonNullableFilter<"RawLog">
    full_log?: JsonFilter<"RawLog">
    created_at?: DateTimeFilter<"RawLog"> | Date | string
    sessionId?: IntNullableFilter<"RawLog"> | number | null
    session?: XOR<SessionNullableRelationFilter, SessionWhereInput> | null
  }, "id" | "transaction_id">

  export type RawLogOrderByWithAggregationInput = {
    id?: SortOrder
    transaction_id?: SortOrder
    timestamp?: SortOrder
    remote_host?: SortOrderInput | SortOrder
    remote_port?: SortOrderInput | SortOrder
    local_host?: SortOrderInput | SortOrder
    local_port?: SortOrderInput | SortOrder
    method?: SortOrderInput | SortOrder
    uri?: SortOrderInput | SortOrder
    http_version?: SortOrderInput | SortOrder
    host?: SortOrderInput | SortOrder
    user_agent?: SortOrderInput | SortOrder
    request_headers?: SortOrderInput | SortOrder
    request_body?: SortOrderInput | SortOrder
    response_headers?: SortOrderInput | SortOrder
    response_body?: SortOrderInput | SortOrder
    matched_rules?: SortOrderInput | SortOrder
    audit_summary?: SortOrderInput | SortOrder
    full_log?: SortOrder
    created_at?: SortOrder
    sessionId?: SortOrderInput | SortOrder
    _count?: RawLogCountOrderByAggregateInput
    _avg?: RawLogAvgOrderByAggregateInput
    _max?: RawLogMaxOrderByAggregateInput
    _min?: RawLogMinOrderByAggregateInput
    _sum?: RawLogSumOrderByAggregateInput
  }

  export type RawLogScalarWhereWithAggregatesInput = {
    AND?: RawLogScalarWhereWithAggregatesInput | RawLogScalarWhereWithAggregatesInput[]
    OR?: RawLogScalarWhereWithAggregatesInput[]
    NOT?: RawLogScalarWhereWithAggregatesInput | RawLogScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"RawLog"> | number
    transaction_id?: StringWithAggregatesFilter<"RawLog"> | string
    timestamp?: DateTimeWithAggregatesFilter<"RawLog"> | Date | string
    remote_host?: StringNullableWithAggregatesFilter<"RawLog"> | string | null
    remote_port?: IntNullableWithAggregatesFilter<"RawLog"> | number | null
    local_host?: StringNullableWithAggregatesFilter<"RawLog"> | string | null
    local_port?: IntNullableWithAggregatesFilter<"RawLog"> | number | null
    method?: StringNullableWithAggregatesFilter<"RawLog"> | string | null
    uri?: StringNullableWithAggregatesFilter<"RawLog"> | string | null
    http_version?: StringNullableWithAggregatesFilter<"RawLog"> | string | null
    host?: StringNullableWithAggregatesFilter<"RawLog"> | string | null
    user_agent?: StringNullableWithAggregatesFilter<"RawLog"> | string | null
    request_headers?: JsonNullableWithAggregatesFilter<"RawLog">
    request_body?: StringNullableWithAggregatesFilter<"RawLog"> | string | null
    response_headers?: JsonNullableWithAggregatesFilter<"RawLog">
    response_body?: StringNullableWithAggregatesFilter<"RawLog"> | string | null
    matched_rules?: JsonNullableWithAggregatesFilter<"RawLog">
    audit_summary?: JsonNullableWithAggregatesFilter<"RawLog">
    full_log?: JsonWithAggregatesFilter<"RawLog">
    created_at?: DateTimeWithAggregatesFilter<"RawLog"> | Date | string
    sessionId?: IntNullableWithAggregatesFilter<"RawLog"> | number | null
  }

  export type SessionWhereInput = {
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    id?: IntFilter<"Session"> | number
    session_id?: StringFilter<"Session"> | string
    ip_address?: StringNullableFilter<"Session"> | string | null
    user_agent?: StringNullableFilter<"Session"> | string | null
    start_time?: DateTimeFilter<"Session"> | Date | string
    end_time?: DateTimeFilter<"Session"> | Date | string
    created_at?: DateTimeFilter<"Session"> | Date | string
    label?: EnumsessionLabelNullableFilter<"Session"> | $Enums.sessionLabel | null
    rawLogs?: RawLogListRelationFilter
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    session_id?: SortOrder
    ip_address?: SortOrderInput | SortOrder
    user_agent?: SortOrderInput | SortOrder
    start_time?: SortOrder
    end_time?: SortOrder
    created_at?: SortOrder
    label?: SortOrderInput | SortOrder
    rawLogs?: RawLogOrderByRelationAggregateInput
  }

  export type SessionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    session_id?: string
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    ip_address?: StringNullableFilter<"Session"> | string | null
    user_agent?: StringNullableFilter<"Session"> | string | null
    start_time?: DateTimeFilter<"Session"> | Date | string
    end_time?: DateTimeFilter<"Session"> | Date | string
    created_at?: DateTimeFilter<"Session"> | Date | string
    label?: EnumsessionLabelNullableFilter<"Session"> | $Enums.sessionLabel | null
    rawLogs?: RawLogListRelationFilter
  }, "id" | "session_id">

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    session_id?: SortOrder
    ip_address?: SortOrderInput | SortOrder
    user_agent?: SortOrderInput | SortOrder
    start_time?: SortOrder
    end_time?: SortOrder
    created_at?: SortOrder
    label?: SortOrderInput | SortOrder
    _count?: SessionCountOrderByAggregateInput
    _avg?: SessionAvgOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
    _sum?: SessionSumOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    OR?: SessionScalarWhereWithAggregatesInput[]
    NOT?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Session"> | number
    session_id?: StringWithAggregatesFilter<"Session"> | string
    ip_address?: StringNullableWithAggregatesFilter<"Session"> | string | null
    user_agent?: StringNullableWithAggregatesFilter<"Session"> | string | null
    start_time?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    end_time?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    created_at?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    label?: EnumsessionLabelNullableWithAggregatesFilter<"Session"> | $Enums.sessionLabel | null
  }

  export type RuleWhereInput = {
    AND?: RuleWhereInput | RuleWhereInput[]
    OR?: RuleWhereInput[]
    NOT?: RuleWhereInput | RuleWhereInput[]
    id?: IntFilter<"Rule"> | number
    rule_id?: IntFilter<"Rule"> | number
    created_at?: DateTimeFilter<"Rule"> | Date | string
    rule_name?: StringFilter<"Rule"> | string
    target?: StringFilter<"Rule"> | string
    operator?: StringFilter<"Rule"> | string
    phase?: IntFilter<"Rule"> | number
    action?: StringFilter<"Rule"> | string
    transformation?: StringNullableFilter<"Rule"> | string | null
    severity_level?: StringFilter<"Rule"> | string
    logdata?: StringNullableFilter<"Rule"> | string | null
    rule_template?: JsonFilter<"Rule">
  }

  export type RuleOrderByWithRelationInput = {
    id?: SortOrder
    rule_id?: SortOrder
    created_at?: SortOrder
    rule_name?: SortOrder
    target?: SortOrder
    operator?: SortOrder
    phase?: SortOrder
    action?: SortOrder
    transformation?: SortOrderInput | SortOrder
    severity_level?: SortOrder
    logdata?: SortOrderInput | SortOrder
    rule_template?: SortOrder
  }

  export type RuleWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    rule_id?: number
    AND?: RuleWhereInput | RuleWhereInput[]
    OR?: RuleWhereInput[]
    NOT?: RuleWhereInput | RuleWhereInput[]
    created_at?: DateTimeFilter<"Rule"> | Date | string
    rule_name?: StringFilter<"Rule"> | string
    target?: StringFilter<"Rule"> | string
    operator?: StringFilter<"Rule"> | string
    phase?: IntFilter<"Rule"> | number
    action?: StringFilter<"Rule"> | string
    transformation?: StringNullableFilter<"Rule"> | string | null
    severity_level?: StringFilter<"Rule"> | string
    logdata?: StringNullableFilter<"Rule"> | string | null
    rule_template?: JsonFilter<"Rule">
  }, "id" | "rule_id">

  export type RuleOrderByWithAggregationInput = {
    id?: SortOrder
    rule_id?: SortOrder
    created_at?: SortOrder
    rule_name?: SortOrder
    target?: SortOrder
    operator?: SortOrder
    phase?: SortOrder
    action?: SortOrder
    transformation?: SortOrderInput | SortOrder
    severity_level?: SortOrder
    logdata?: SortOrderInput | SortOrder
    rule_template?: SortOrder
    _count?: RuleCountOrderByAggregateInput
    _avg?: RuleAvgOrderByAggregateInput
    _max?: RuleMaxOrderByAggregateInput
    _min?: RuleMinOrderByAggregateInput
    _sum?: RuleSumOrderByAggregateInput
  }

  export type RuleScalarWhereWithAggregatesInput = {
    AND?: RuleScalarWhereWithAggregatesInput | RuleScalarWhereWithAggregatesInput[]
    OR?: RuleScalarWhereWithAggregatesInput[]
    NOT?: RuleScalarWhereWithAggregatesInput | RuleScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Rule"> | number
    rule_id?: IntWithAggregatesFilter<"Rule"> | number
    created_at?: DateTimeWithAggregatesFilter<"Rule"> | Date | string
    rule_name?: StringWithAggregatesFilter<"Rule"> | string
    target?: StringWithAggregatesFilter<"Rule"> | string
    operator?: StringWithAggregatesFilter<"Rule"> | string
    phase?: IntWithAggregatesFilter<"Rule"> | number
    action?: StringWithAggregatesFilter<"Rule"> | string
    transformation?: StringNullableWithAggregatesFilter<"Rule"> | string | null
    severity_level?: StringWithAggregatesFilter<"Rule"> | string
    logdata?: StringNullableWithAggregatesFilter<"Rule"> | string | null
    rule_template?: JsonWithAggregatesFilter<"Rule">
  }

  export type RawLogCreateInput = {
    transaction_id: string
    timestamp: Date | string
    remote_host?: string | null
    remote_port?: number | null
    local_host?: string | null
    local_port?: number | null
    method?: string | null
    uri?: string | null
    http_version?: string | null
    host?: string | null
    user_agent?: string | null
    request_headers?: NullableJsonNullValueInput | InputJsonValue
    request_body?: string | null
    response_headers?: NullableJsonNullValueInput | InputJsonValue
    response_body?: string | null
    matched_rules?: NullableJsonNullValueInput | InputJsonValue
    audit_summary?: NullableJsonNullValueInput | InputJsonValue
    full_log: JsonNullValueInput | InputJsonValue
    created_at?: Date | string
    session?: SessionCreateNestedOneWithoutRawLogsInput
  }

  export type RawLogUncheckedCreateInput = {
    id?: number
    transaction_id: string
    timestamp: Date | string
    remote_host?: string | null
    remote_port?: number | null
    local_host?: string | null
    local_port?: number | null
    method?: string | null
    uri?: string | null
    http_version?: string | null
    host?: string | null
    user_agent?: string | null
    request_headers?: NullableJsonNullValueInput | InputJsonValue
    request_body?: string | null
    response_headers?: NullableJsonNullValueInput | InputJsonValue
    response_body?: string | null
    matched_rules?: NullableJsonNullValueInput | InputJsonValue
    audit_summary?: NullableJsonNullValueInput | InputJsonValue
    full_log: JsonNullValueInput | InputJsonValue
    created_at?: Date | string
    sessionId?: number | null
  }

  export type RawLogUpdateInput = {
    transaction_id?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    remote_host?: NullableStringFieldUpdateOperationsInput | string | null
    remote_port?: NullableIntFieldUpdateOperationsInput | number | null
    local_host?: NullableStringFieldUpdateOperationsInput | string | null
    local_port?: NullableIntFieldUpdateOperationsInput | number | null
    method?: NullableStringFieldUpdateOperationsInput | string | null
    uri?: NullableStringFieldUpdateOperationsInput | string | null
    http_version?: NullableStringFieldUpdateOperationsInput | string | null
    host?: NullableStringFieldUpdateOperationsInput | string | null
    user_agent?: NullableStringFieldUpdateOperationsInput | string | null
    request_headers?: NullableJsonNullValueInput | InputJsonValue
    request_body?: NullableStringFieldUpdateOperationsInput | string | null
    response_headers?: NullableJsonNullValueInput | InputJsonValue
    response_body?: NullableStringFieldUpdateOperationsInput | string | null
    matched_rules?: NullableJsonNullValueInput | InputJsonValue
    audit_summary?: NullableJsonNullValueInput | InputJsonValue
    full_log?: JsonNullValueInput | InputJsonValue
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    session?: SessionUpdateOneWithoutRawLogsNestedInput
  }

  export type RawLogUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    transaction_id?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    remote_host?: NullableStringFieldUpdateOperationsInput | string | null
    remote_port?: NullableIntFieldUpdateOperationsInput | number | null
    local_host?: NullableStringFieldUpdateOperationsInput | string | null
    local_port?: NullableIntFieldUpdateOperationsInput | number | null
    method?: NullableStringFieldUpdateOperationsInput | string | null
    uri?: NullableStringFieldUpdateOperationsInput | string | null
    http_version?: NullableStringFieldUpdateOperationsInput | string | null
    host?: NullableStringFieldUpdateOperationsInput | string | null
    user_agent?: NullableStringFieldUpdateOperationsInput | string | null
    request_headers?: NullableJsonNullValueInput | InputJsonValue
    request_body?: NullableStringFieldUpdateOperationsInput | string | null
    response_headers?: NullableJsonNullValueInput | InputJsonValue
    response_body?: NullableStringFieldUpdateOperationsInput | string | null
    matched_rules?: NullableJsonNullValueInput | InputJsonValue
    audit_summary?: NullableJsonNullValueInput | InputJsonValue
    full_log?: JsonNullValueInput | InputJsonValue
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    sessionId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type RawLogCreateManyInput = {
    id?: number
    transaction_id: string
    timestamp: Date | string
    remote_host?: string | null
    remote_port?: number | null
    local_host?: string | null
    local_port?: number | null
    method?: string | null
    uri?: string | null
    http_version?: string | null
    host?: string | null
    user_agent?: string | null
    request_headers?: NullableJsonNullValueInput | InputJsonValue
    request_body?: string | null
    response_headers?: NullableJsonNullValueInput | InputJsonValue
    response_body?: string | null
    matched_rules?: NullableJsonNullValueInput | InputJsonValue
    audit_summary?: NullableJsonNullValueInput | InputJsonValue
    full_log: JsonNullValueInput | InputJsonValue
    created_at?: Date | string
    sessionId?: number | null
  }

  export type RawLogUpdateManyMutationInput = {
    transaction_id?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    remote_host?: NullableStringFieldUpdateOperationsInput | string | null
    remote_port?: NullableIntFieldUpdateOperationsInput | number | null
    local_host?: NullableStringFieldUpdateOperationsInput | string | null
    local_port?: NullableIntFieldUpdateOperationsInput | number | null
    method?: NullableStringFieldUpdateOperationsInput | string | null
    uri?: NullableStringFieldUpdateOperationsInput | string | null
    http_version?: NullableStringFieldUpdateOperationsInput | string | null
    host?: NullableStringFieldUpdateOperationsInput | string | null
    user_agent?: NullableStringFieldUpdateOperationsInput | string | null
    request_headers?: NullableJsonNullValueInput | InputJsonValue
    request_body?: NullableStringFieldUpdateOperationsInput | string | null
    response_headers?: NullableJsonNullValueInput | InputJsonValue
    response_body?: NullableStringFieldUpdateOperationsInput | string | null
    matched_rules?: NullableJsonNullValueInput | InputJsonValue
    audit_summary?: NullableJsonNullValueInput | InputJsonValue
    full_log?: JsonNullValueInput | InputJsonValue
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RawLogUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    transaction_id?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    remote_host?: NullableStringFieldUpdateOperationsInput | string | null
    remote_port?: NullableIntFieldUpdateOperationsInput | number | null
    local_host?: NullableStringFieldUpdateOperationsInput | string | null
    local_port?: NullableIntFieldUpdateOperationsInput | number | null
    method?: NullableStringFieldUpdateOperationsInput | string | null
    uri?: NullableStringFieldUpdateOperationsInput | string | null
    http_version?: NullableStringFieldUpdateOperationsInput | string | null
    host?: NullableStringFieldUpdateOperationsInput | string | null
    user_agent?: NullableStringFieldUpdateOperationsInput | string | null
    request_headers?: NullableJsonNullValueInput | InputJsonValue
    request_body?: NullableStringFieldUpdateOperationsInput | string | null
    response_headers?: NullableJsonNullValueInput | InputJsonValue
    response_body?: NullableStringFieldUpdateOperationsInput | string | null
    matched_rules?: NullableJsonNullValueInput | InputJsonValue
    audit_summary?: NullableJsonNullValueInput | InputJsonValue
    full_log?: JsonNullValueInput | InputJsonValue
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    sessionId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type SessionCreateInput = {
    session_id: string
    ip_address?: string | null
    user_agent?: string | null
    start_time: Date | string
    end_time: Date | string
    created_at?: Date | string
    label?: $Enums.sessionLabel | null
    rawLogs?: RawLogCreateNestedManyWithoutSessionInput
  }

  export type SessionUncheckedCreateInput = {
    id?: number
    session_id: string
    ip_address?: string | null
    user_agent?: string | null
    start_time: Date | string
    end_time: Date | string
    created_at?: Date | string
    label?: $Enums.sessionLabel | null
    rawLogs?: RawLogUncheckedCreateNestedManyWithoutSessionInput
  }

  export type SessionUpdateInput = {
    session_id?: StringFieldUpdateOperationsInput | string
    ip_address?: NullableStringFieldUpdateOperationsInput | string | null
    user_agent?: NullableStringFieldUpdateOperationsInput | string | null
    start_time?: DateTimeFieldUpdateOperationsInput | Date | string
    end_time?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    label?: NullableEnumsessionLabelFieldUpdateOperationsInput | $Enums.sessionLabel | null
    rawLogs?: RawLogUpdateManyWithoutSessionNestedInput
  }

  export type SessionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    session_id?: StringFieldUpdateOperationsInput | string
    ip_address?: NullableStringFieldUpdateOperationsInput | string | null
    user_agent?: NullableStringFieldUpdateOperationsInput | string | null
    start_time?: DateTimeFieldUpdateOperationsInput | Date | string
    end_time?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    label?: NullableEnumsessionLabelFieldUpdateOperationsInput | $Enums.sessionLabel | null
    rawLogs?: RawLogUncheckedUpdateManyWithoutSessionNestedInput
  }

  export type SessionCreateManyInput = {
    id?: number
    session_id: string
    ip_address?: string | null
    user_agent?: string | null
    start_time: Date | string
    end_time: Date | string
    created_at?: Date | string
    label?: $Enums.sessionLabel | null
  }

  export type SessionUpdateManyMutationInput = {
    session_id?: StringFieldUpdateOperationsInput | string
    ip_address?: NullableStringFieldUpdateOperationsInput | string | null
    user_agent?: NullableStringFieldUpdateOperationsInput | string | null
    start_time?: DateTimeFieldUpdateOperationsInput | Date | string
    end_time?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    label?: NullableEnumsessionLabelFieldUpdateOperationsInput | $Enums.sessionLabel | null
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    session_id?: StringFieldUpdateOperationsInput | string
    ip_address?: NullableStringFieldUpdateOperationsInput | string | null
    user_agent?: NullableStringFieldUpdateOperationsInput | string | null
    start_time?: DateTimeFieldUpdateOperationsInput | Date | string
    end_time?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    label?: NullableEnumsessionLabelFieldUpdateOperationsInput | $Enums.sessionLabel | null
  }

  export type RuleCreateInput = {
    rule_id: number
    created_at?: Date | string
    rule_name: string
    target: string
    operator: string
    phase: number
    action: string
    transformation?: string | null
    severity_level: string
    logdata?: string | null
    rule_template: JsonNullValueInput | InputJsonValue
  }

  export type RuleUncheckedCreateInput = {
    id?: number
    rule_id: number
    created_at?: Date | string
    rule_name: string
    target: string
    operator: string
    phase: number
    action: string
    transformation?: string | null
    severity_level: string
    logdata?: string | null
    rule_template: JsonNullValueInput | InputJsonValue
  }

  export type RuleUpdateInput = {
    rule_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    rule_name?: StringFieldUpdateOperationsInput | string
    target?: StringFieldUpdateOperationsInput | string
    operator?: StringFieldUpdateOperationsInput | string
    phase?: IntFieldUpdateOperationsInput | number
    action?: StringFieldUpdateOperationsInput | string
    transformation?: NullableStringFieldUpdateOperationsInput | string | null
    severity_level?: StringFieldUpdateOperationsInput | string
    logdata?: NullableStringFieldUpdateOperationsInput | string | null
    rule_template?: JsonNullValueInput | InputJsonValue
  }

  export type RuleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    rule_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    rule_name?: StringFieldUpdateOperationsInput | string
    target?: StringFieldUpdateOperationsInput | string
    operator?: StringFieldUpdateOperationsInput | string
    phase?: IntFieldUpdateOperationsInput | number
    action?: StringFieldUpdateOperationsInput | string
    transformation?: NullableStringFieldUpdateOperationsInput | string | null
    severity_level?: StringFieldUpdateOperationsInput | string
    logdata?: NullableStringFieldUpdateOperationsInput | string | null
    rule_template?: JsonNullValueInput | InputJsonValue
  }

  export type RuleCreateManyInput = {
    id?: number
    rule_id: number
    created_at?: Date | string
    rule_name: string
    target: string
    operator: string
    phase: number
    action: string
    transformation?: string | null
    severity_level: string
    logdata?: string | null
    rule_template: JsonNullValueInput | InputJsonValue
  }

  export type RuleUpdateManyMutationInput = {
    rule_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    rule_name?: StringFieldUpdateOperationsInput | string
    target?: StringFieldUpdateOperationsInput | string
    operator?: StringFieldUpdateOperationsInput | string
    phase?: IntFieldUpdateOperationsInput | number
    action?: StringFieldUpdateOperationsInput | string
    transformation?: NullableStringFieldUpdateOperationsInput | string | null
    severity_level?: StringFieldUpdateOperationsInput | string
    logdata?: NullableStringFieldUpdateOperationsInput | string | null
    rule_template?: JsonNullValueInput | InputJsonValue
  }

  export type RuleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    rule_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    rule_name?: StringFieldUpdateOperationsInput | string
    target?: StringFieldUpdateOperationsInput | string
    operator?: StringFieldUpdateOperationsInput | string
    phase?: IntFieldUpdateOperationsInput | number
    action?: StringFieldUpdateOperationsInput | string
    transformation?: NullableStringFieldUpdateOperationsInput | string | null
    severity_level?: StringFieldUpdateOperationsInput | string
    logdata?: NullableStringFieldUpdateOperationsInput | string | null
    rule_template?: JsonNullValueInput | InputJsonValue
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }
  export type JsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type SessionNullableRelationFilter = {
    is?: SessionWhereInput | null
    isNot?: SessionWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type RawLogCountOrderByAggregateInput = {
    id?: SortOrder
    transaction_id?: SortOrder
    timestamp?: SortOrder
    remote_host?: SortOrder
    remote_port?: SortOrder
    local_host?: SortOrder
    local_port?: SortOrder
    method?: SortOrder
    uri?: SortOrder
    http_version?: SortOrder
    host?: SortOrder
    user_agent?: SortOrder
    request_headers?: SortOrder
    request_body?: SortOrder
    response_headers?: SortOrder
    response_body?: SortOrder
    matched_rules?: SortOrder
    audit_summary?: SortOrder
    full_log?: SortOrder
    created_at?: SortOrder
    sessionId?: SortOrder
  }

  export type RawLogAvgOrderByAggregateInput = {
    id?: SortOrder
    remote_port?: SortOrder
    local_port?: SortOrder
    sessionId?: SortOrder
  }

  export type RawLogMaxOrderByAggregateInput = {
    id?: SortOrder
    transaction_id?: SortOrder
    timestamp?: SortOrder
    remote_host?: SortOrder
    remote_port?: SortOrder
    local_host?: SortOrder
    local_port?: SortOrder
    method?: SortOrder
    uri?: SortOrder
    http_version?: SortOrder
    host?: SortOrder
    user_agent?: SortOrder
    request_body?: SortOrder
    response_body?: SortOrder
    created_at?: SortOrder
    sessionId?: SortOrder
  }

  export type RawLogMinOrderByAggregateInput = {
    id?: SortOrder
    transaction_id?: SortOrder
    timestamp?: SortOrder
    remote_host?: SortOrder
    remote_port?: SortOrder
    local_host?: SortOrder
    local_port?: SortOrder
    method?: SortOrder
    uri?: SortOrder
    http_version?: SortOrder
    host?: SortOrder
    user_agent?: SortOrder
    request_body?: SortOrder
    response_body?: SortOrder
    created_at?: SortOrder
    sessionId?: SortOrder
  }

  export type RawLogSumOrderByAggregateInput = {
    id?: SortOrder
    remote_port?: SortOrder
    local_port?: SortOrder
    sessionId?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type EnumsessionLabelNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.sessionLabel | EnumsessionLabelFieldRefInput<$PrismaModel> | null
    in?: $Enums.sessionLabel[] | ListEnumsessionLabelFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.sessionLabel[] | ListEnumsessionLabelFieldRefInput<$PrismaModel> | null
    not?: NestedEnumsessionLabelNullableFilter<$PrismaModel> | $Enums.sessionLabel | null
  }

  export type RawLogListRelationFilter = {
    every?: RawLogWhereInput
    some?: RawLogWhereInput
    none?: RawLogWhereInput
  }

  export type RawLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    session_id?: SortOrder
    ip_address?: SortOrder
    user_agent?: SortOrder
    start_time?: SortOrder
    end_time?: SortOrder
    created_at?: SortOrder
    label?: SortOrder
  }

  export type SessionAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    session_id?: SortOrder
    ip_address?: SortOrder
    user_agent?: SortOrder
    start_time?: SortOrder
    end_time?: SortOrder
    created_at?: SortOrder
    label?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    session_id?: SortOrder
    ip_address?: SortOrder
    user_agent?: SortOrder
    start_time?: SortOrder
    end_time?: SortOrder
    created_at?: SortOrder
    label?: SortOrder
  }

  export type SessionSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumsessionLabelNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.sessionLabel | EnumsessionLabelFieldRefInput<$PrismaModel> | null
    in?: $Enums.sessionLabel[] | ListEnumsessionLabelFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.sessionLabel[] | ListEnumsessionLabelFieldRefInput<$PrismaModel> | null
    not?: NestedEnumsessionLabelNullableWithAggregatesFilter<$PrismaModel> | $Enums.sessionLabel | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumsessionLabelNullableFilter<$PrismaModel>
    _max?: NestedEnumsessionLabelNullableFilter<$PrismaModel>
  }

  export type RuleCountOrderByAggregateInput = {
    id?: SortOrder
    rule_id?: SortOrder
    created_at?: SortOrder
    rule_name?: SortOrder
    target?: SortOrder
    operator?: SortOrder
    phase?: SortOrder
    action?: SortOrder
    transformation?: SortOrder
    severity_level?: SortOrder
    logdata?: SortOrder
    rule_template?: SortOrder
  }

  export type RuleAvgOrderByAggregateInput = {
    id?: SortOrder
    rule_id?: SortOrder
    phase?: SortOrder
  }

  export type RuleMaxOrderByAggregateInput = {
    id?: SortOrder
    rule_id?: SortOrder
    created_at?: SortOrder
    rule_name?: SortOrder
    target?: SortOrder
    operator?: SortOrder
    phase?: SortOrder
    action?: SortOrder
    transformation?: SortOrder
    severity_level?: SortOrder
    logdata?: SortOrder
  }

  export type RuleMinOrderByAggregateInput = {
    id?: SortOrder
    rule_id?: SortOrder
    created_at?: SortOrder
    rule_name?: SortOrder
    target?: SortOrder
    operator?: SortOrder
    phase?: SortOrder
    action?: SortOrder
    transformation?: SortOrder
    severity_level?: SortOrder
    logdata?: SortOrder
  }

  export type RuleSumOrderByAggregateInput = {
    id?: SortOrder
    rule_id?: SortOrder
    phase?: SortOrder
  }

  export type SessionCreateNestedOneWithoutRawLogsInput = {
    create?: XOR<SessionCreateWithoutRawLogsInput, SessionUncheckedCreateWithoutRawLogsInput>
    connectOrCreate?: SessionCreateOrConnectWithoutRawLogsInput
    connect?: SessionWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type SessionUpdateOneWithoutRawLogsNestedInput = {
    create?: XOR<SessionCreateWithoutRawLogsInput, SessionUncheckedCreateWithoutRawLogsInput>
    connectOrCreate?: SessionCreateOrConnectWithoutRawLogsInput
    upsert?: SessionUpsertWithoutRawLogsInput
    disconnect?: SessionWhereInput | boolean
    delete?: SessionWhereInput | boolean
    connect?: SessionWhereUniqueInput
    update?: XOR<XOR<SessionUpdateToOneWithWhereWithoutRawLogsInput, SessionUpdateWithoutRawLogsInput>, SessionUncheckedUpdateWithoutRawLogsInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type RawLogCreateNestedManyWithoutSessionInput = {
    create?: XOR<RawLogCreateWithoutSessionInput, RawLogUncheckedCreateWithoutSessionInput> | RawLogCreateWithoutSessionInput[] | RawLogUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: RawLogCreateOrConnectWithoutSessionInput | RawLogCreateOrConnectWithoutSessionInput[]
    createMany?: RawLogCreateManySessionInputEnvelope
    connect?: RawLogWhereUniqueInput | RawLogWhereUniqueInput[]
  }

  export type RawLogUncheckedCreateNestedManyWithoutSessionInput = {
    create?: XOR<RawLogCreateWithoutSessionInput, RawLogUncheckedCreateWithoutSessionInput> | RawLogCreateWithoutSessionInput[] | RawLogUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: RawLogCreateOrConnectWithoutSessionInput | RawLogCreateOrConnectWithoutSessionInput[]
    createMany?: RawLogCreateManySessionInputEnvelope
    connect?: RawLogWhereUniqueInput | RawLogWhereUniqueInput[]
  }

  export type NullableEnumsessionLabelFieldUpdateOperationsInput = {
    set?: $Enums.sessionLabel | null
  }

  export type RawLogUpdateManyWithoutSessionNestedInput = {
    create?: XOR<RawLogCreateWithoutSessionInput, RawLogUncheckedCreateWithoutSessionInput> | RawLogCreateWithoutSessionInput[] | RawLogUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: RawLogCreateOrConnectWithoutSessionInput | RawLogCreateOrConnectWithoutSessionInput[]
    upsert?: RawLogUpsertWithWhereUniqueWithoutSessionInput | RawLogUpsertWithWhereUniqueWithoutSessionInput[]
    createMany?: RawLogCreateManySessionInputEnvelope
    set?: RawLogWhereUniqueInput | RawLogWhereUniqueInput[]
    disconnect?: RawLogWhereUniqueInput | RawLogWhereUniqueInput[]
    delete?: RawLogWhereUniqueInput | RawLogWhereUniqueInput[]
    connect?: RawLogWhereUniqueInput | RawLogWhereUniqueInput[]
    update?: RawLogUpdateWithWhereUniqueWithoutSessionInput | RawLogUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: RawLogUpdateManyWithWhereWithoutSessionInput | RawLogUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: RawLogScalarWhereInput | RawLogScalarWhereInput[]
  }

  export type RawLogUncheckedUpdateManyWithoutSessionNestedInput = {
    create?: XOR<RawLogCreateWithoutSessionInput, RawLogUncheckedCreateWithoutSessionInput> | RawLogCreateWithoutSessionInput[] | RawLogUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: RawLogCreateOrConnectWithoutSessionInput | RawLogCreateOrConnectWithoutSessionInput[]
    upsert?: RawLogUpsertWithWhereUniqueWithoutSessionInput | RawLogUpsertWithWhereUniqueWithoutSessionInput[]
    createMany?: RawLogCreateManySessionInputEnvelope
    set?: RawLogWhereUniqueInput | RawLogWhereUniqueInput[]
    disconnect?: RawLogWhereUniqueInput | RawLogWhereUniqueInput[]
    delete?: RawLogWhereUniqueInput | RawLogWhereUniqueInput[]
    connect?: RawLogWhereUniqueInput | RawLogWhereUniqueInput[]
    update?: RawLogUpdateWithWhereUniqueWithoutSessionInput | RawLogUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: RawLogUpdateManyWithWhereWithoutSessionInput | RawLogUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: RawLogScalarWhereInput | RawLogScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }
  export type NestedJsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedEnumsessionLabelNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.sessionLabel | EnumsessionLabelFieldRefInput<$PrismaModel> | null
    in?: $Enums.sessionLabel[] | ListEnumsessionLabelFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.sessionLabel[] | ListEnumsessionLabelFieldRefInput<$PrismaModel> | null
    not?: NestedEnumsessionLabelNullableFilter<$PrismaModel> | $Enums.sessionLabel | null
  }

  export type NestedEnumsessionLabelNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.sessionLabel | EnumsessionLabelFieldRefInput<$PrismaModel> | null
    in?: $Enums.sessionLabel[] | ListEnumsessionLabelFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.sessionLabel[] | ListEnumsessionLabelFieldRefInput<$PrismaModel> | null
    not?: NestedEnumsessionLabelNullableWithAggregatesFilter<$PrismaModel> | $Enums.sessionLabel | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumsessionLabelNullableFilter<$PrismaModel>
    _max?: NestedEnumsessionLabelNullableFilter<$PrismaModel>
  }

  export type SessionCreateWithoutRawLogsInput = {
    session_id: string
    ip_address?: string | null
    user_agent?: string | null
    start_time: Date | string
    end_time: Date | string
    created_at?: Date | string
    label?: $Enums.sessionLabel | null
  }

  export type SessionUncheckedCreateWithoutRawLogsInput = {
    id?: number
    session_id: string
    ip_address?: string | null
    user_agent?: string | null
    start_time: Date | string
    end_time: Date | string
    created_at?: Date | string
    label?: $Enums.sessionLabel | null
  }

  export type SessionCreateOrConnectWithoutRawLogsInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutRawLogsInput, SessionUncheckedCreateWithoutRawLogsInput>
  }

  export type SessionUpsertWithoutRawLogsInput = {
    update: XOR<SessionUpdateWithoutRawLogsInput, SessionUncheckedUpdateWithoutRawLogsInput>
    create: XOR<SessionCreateWithoutRawLogsInput, SessionUncheckedCreateWithoutRawLogsInput>
    where?: SessionWhereInput
  }

  export type SessionUpdateToOneWithWhereWithoutRawLogsInput = {
    where?: SessionWhereInput
    data: XOR<SessionUpdateWithoutRawLogsInput, SessionUncheckedUpdateWithoutRawLogsInput>
  }

  export type SessionUpdateWithoutRawLogsInput = {
    session_id?: StringFieldUpdateOperationsInput | string
    ip_address?: NullableStringFieldUpdateOperationsInput | string | null
    user_agent?: NullableStringFieldUpdateOperationsInput | string | null
    start_time?: DateTimeFieldUpdateOperationsInput | Date | string
    end_time?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    label?: NullableEnumsessionLabelFieldUpdateOperationsInput | $Enums.sessionLabel | null
  }

  export type SessionUncheckedUpdateWithoutRawLogsInput = {
    id?: IntFieldUpdateOperationsInput | number
    session_id?: StringFieldUpdateOperationsInput | string
    ip_address?: NullableStringFieldUpdateOperationsInput | string | null
    user_agent?: NullableStringFieldUpdateOperationsInput | string | null
    start_time?: DateTimeFieldUpdateOperationsInput | Date | string
    end_time?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    label?: NullableEnumsessionLabelFieldUpdateOperationsInput | $Enums.sessionLabel | null
  }

  export type RawLogCreateWithoutSessionInput = {
    transaction_id: string
    timestamp: Date | string
    remote_host?: string | null
    remote_port?: number | null
    local_host?: string | null
    local_port?: number | null
    method?: string | null
    uri?: string | null
    http_version?: string | null
    host?: string | null
    user_agent?: string | null
    request_headers?: NullableJsonNullValueInput | InputJsonValue
    request_body?: string | null
    response_headers?: NullableJsonNullValueInput | InputJsonValue
    response_body?: string | null
    matched_rules?: NullableJsonNullValueInput | InputJsonValue
    audit_summary?: NullableJsonNullValueInput | InputJsonValue
    full_log: JsonNullValueInput | InputJsonValue
    created_at?: Date | string
  }

  export type RawLogUncheckedCreateWithoutSessionInput = {
    id?: number
    transaction_id: string
    timestamp: Date | string
    remote_host?: string | null
    remote_port?: number | null
    local_host?: string | null
    local_port?: number | null
    method?: string | null
    uri?: string | null
    http_version?: string | null
    host?: string | null
    user_agent?: string | null
    request_headers?: NullableJsonNullValueInput | InputJsonValue
    request_body?: string | null
    response_headers?: NullableJsonNullValueInput | InputJsonValue
    response_body?: string | null
    matched_rules?: NullableJsonNullValueInput | InputJsonValue
    audit_summary?: NullableJsonNullValueInput | InputJsonValue
    full_log: JsonNullValueInput | InputJsonValue
    created_at?: Date | string
  }

  export type RawLogCreateOrConnectWithoutSessionInput = {
    where: RawLogWhereUniqueInput
    create: XOR<RawLogCreateWithoutSessionInput, RawLogUncheckedCreateWithoutSessionInput>
  }

  export type RawLogCreateManySessionInputEnvelope = {
    data: RawLogCreateManySessionInput | RawLogCreateManySessionInput[]
    skipDuplicates?: boolean
  }

  export type RawLogUpsertWithWhereUniqueWithoutSessionInput = {
    where: RawLogWhereUniqueInput
    update: XOR<RawLogUpdateWithoutSessionInput, RawLogUncheckedUpdateWithoutSessionInput>
    create: XOR<RawLogCreateWithoutSessionInput, RawLogUncheckedCreateWithoutSessionInput>
  }

  export type RawLogUpdateWithWhereUniqueWithoutSessionInput = {
    where: RawLogWhereUniqueInput
    data: XOR<RawLogUpdateWithoutSessionInput, RawLogUncheckedUpdateWithoutSessionInput>
  }

  export type RawLogUpdateManyWithWhereWithoutSessionInput = {
    where: RawLogScalarWhereInput
    data: XOR<RawLogUpdateManyMutationInput, RawLogUncheckedUpdateManyWithoutSessionInput>
  }

  export type RawLogScalarWhereInput = {
    AND?: RawLogScalarWhereInput | RawLogScalarWhereInput[]
    OR?: RawLogScalarWhereInput[]
    NOT?: RawLogScalarWhereInput | RawLogScalarWhereInput[]
    id?: IntFilter<"RawLog"> | number
    transaction_id?: StringFilter<"RawLog"> | string
    timestamp?: DateTimeFilter<"RawLog"> | Date | string
    remote_host?: StringNullableFilter<"RawLog"> | string | null
    remote_port?: IntNullableFilter<"RawLog"> | number | null
    local_host?: StringNullableFilter<"RawLog"> | string | null
    local_port?: IntNullableFilter<"RawLog"> | number | null
    method?: StringNullableFilter<"RawLog"> | string | null
    uri?: StringNullableFilter<"RawLog"> | string | null
    http_version?: StringNullableFilter<"RawLog"> | string | null
    host?: StringNullableFilter<"RawLog"> | string | null
    user_agent?: StringNullableFilter<"RawLog"> | string | null
    request_headers?: JsonNullableFilter<"RawLog">
    request_body?: StringNullableFilter<"RawLog"> | string | null
    response_headers?: JsonNullableFilter<"RawLog">
    response_body?: StringNullableFilter<"RawLog"> | string | null
    matched_rules?: JsonNullableFilter<"RawLog">
    audit_summary?: JsonNullableFilter<"RawLog">
    full_log?: JsonFilter<"RawLog">
    created_at?: DateTimeFilter<"RawLog"> | Date | string
    sessionId?: IntNullableFilter<"RawLog"> | number | null
  }

  export type RawLogCreateManySessionInput = {
    id?: number
    transaction_id: string
    timestamp: Date | string
    remote_host?: string | null
    remote_port?: number | null
    local_host?: string | null
    local_port?: number | null
    method?: string | null
    uri?: string | null
    http_version?: string | null
    host?: string | null
    user_agent?: string | null
    request_headers?: NullableJsonNullValueInput | InputJsonValue
    request_body?: string | null
    response_headers?: NullableJsonNullValueInput | InputJsonValue
    response_body?: string | null
    matched_rules?: NullableJsonNullValueInput | InputJsonValue
    audit_summary?: NullableJsonNullValueInput | InputJsonValue
    full_log: JsonNullValueInput | InputJsonValue
    created_at?: Date | string
  }

  export type RawLogUpdateWithoutSessionInput = {
    transaction_id?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    remote_host?: NullableStringFieldUpdateOperationsInput | string | null
    remote_port?: NullableIntFieldUpdateOperationsInput | number | null
    local_host?: NullableStringFieldUpdateOperationsInput | string | null
    local_port?: NullableIntFieldUpdateOperationsInput | number | null
    method?: NullableStringFieldUpdateOperationsInput | string | null
    uri?: NullableStringFieldUpdateOperationsInput | string | null
    http_version?: NullableStringFieldUpdateOperationsInput | string | null
    host?: NullableStringFieldUpdateOperationsInput | string | null
    user_agent?: NullableStringFieldUpdateOperationsInput | string | null
    request_headers?: NullableJsonNullValueInput | InputJsonValue
    request_body?: NullableStringFieldUpdateOperationsInput | string | null
    response_headers?: NullableJsonNullValueInput | InputJsonValue
    response_body?: NullableStringFieldUpdateOperationsInput | string | null
    matched_rules?: NullableJsonNullValueInput | InputJsonValue
    audit_summary?: NullableJsonNullValueInput | InputJsonValue
    full_log?: JsonNullValueInput | InputJsonValue
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RawLogUncheckedUpdateWithoutSessionInput = {
    id?: IntFieldUpdateOperationsInput | number
    transaction_id?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    remote_host?: NullableStringFieldUpdateOperationsInput | string | null
    remote_port?: NullableIntFieldUpdateOperationsInput | number | null
    local_host?: NullableStringFieldUpdateOperationsInput | string | null
    local_port?: NullableIntFieldUpdateOperationsInput | number | null
    method?: NullableStringFieldUpdateOperationsInput | string | null
    uri?: NullableStringFieldUpdateOperationsInput | string | null
    http_version?: NullableStringFieldUpdateOperationsInput | string | null
    host?: NullableStringFieldUpdateOperationsInput | string | null
    user_agent?: NullableStringFieldUpdateOperationsInput | string | null
    request_headers?: NullableJsonNullValueInput | InputJsonValue
    request_body?: NullableStringFieldUpdateOperationsInput | string | null
    response_headers?: NullableJsonNullValueInput | InputJsonValue
    response_body?: NullableStringFieldUpdateOperationsInput | string | null
    matched_rules?: NullableJsonNullValueInput | InputJsonValue
    audit_summary?: NullableJsonNullValueInput | InputJsonValue
    full_log?: JsonNullValueInput | InputJsonValue
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RawLogUncheckedUpdateManyWithoutSessionInput = {
    id?: IntFieldUpdateOperationsInput | number
    transaction_id?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    remote_host?: NullableStringFieldUpdateOperationsInput | string | null
    remote_port?: NullableIntFieldUpdateOperationsInput | number | null
    local_host?: NullableStringFieldUpdateOperationsInput | string | null
    local_port?: NullableIntFieldUpdateOperationsInput | number | null
    method?: NullableStringFieldUpdateOperationsInput | string | null
    uri?: NullableStringFieldUpdateOperationsInput | string | null
    http_version?: NullableStringFieldUpdateOperationsInput | string | null
    host?: NullableStringFieldUpdateOperationsInput | string | null
    user_agent?: NullableStringFieldUpdateOperationsInput | string | null
    request_headers?: NullableJsonNullValueInput | InputJsonValue
    request_body?: NullableStringFieldUpdateOperationsInput | string | null
    response_headers?: NullableJsonNullValueInput | InputJsonValue
    response_body?: NullableStringFieldUpdateOperationsInput | string | null
    matched_rules?: NullableJsonNullValueInput | InputJsonValue
    audit_summary?: NullableJsonNullValueInput | InputJsonValue
    full_log?: JsonNullValueInput | InputJsonValue
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use SessionCountOutputTypeDefaultArgs instead
     */
    export type SessionCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SessionCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RawLogDefaultArgs instead
     */
    export type RawLogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RawLogDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SessionDefaultArgs instead
     */
    export type SessionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SessionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RuleDefaultArgs instead
     */
    export type RuleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RuleDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}