networks:
  web-network:
    driver: bridge

services:
  flask-app:
    build: ./flask_app
    container_name: flask-app
    restart: always
    env_file:
      - ./flask_app/.env
    networks:
      - web-network

  modsec-proxy:
    build: ./modsec-proxy
    container_name: modsec-proxy
    restart: always
    ports:
      - "8080:80"
    volumes:
      - ./modsec_logs:/var/log/apache2/
    networks:
      - web-network
    depends_on:
      - flask-app
  
  postgres:
    image: postgres:15
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: luckycookie
      POSTGRES_PASSWORD: luckycookie
      POSTGRES_DB: modsec_logs
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - web-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U luckycookie -d modsec_logs -h localhost"]
      interval: 5s
      timeout: 3s
      retries: 20

  log_collector:
    build: ./log_collector
    container_name: log_collector
    restart: always
    env_file:
      - ./log_collector/.env
    networks:
      - web-network
    depends_on:
      - postgres
    volumes:
      - ./modsec_logs:/var/log/apache2/
      # - ./log_collector:/app/log_collector
      - ./:/app #프로젝트 소스 마운트
    working_dir: /app/log_collector #기본 작업 디렉토리 고정
  
  prisma-runner:
    image: node:20-alpine
    container_name: prisma-runner
    working_dir: /app
    volumes:
      - ./:/app              # 소스/스키마 마운트
    env_file:
      - ./.env               # DATABASE_URL=postgres://...(host는 postgres)
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - web-network
    command: ["sh","-lc","node -v"]  # 필요 시 커맨드 덮어쓰기

  gen_rule:
    build: ./gen_rule
    container_name: gen_rule
    restart: "no"
    env_file:
      - ./gen_rule/.env
    networks:
      - web-network
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./:/app
      - ./rules:/app/rules
    working_dir: /app/gen_rule
    command: ["python", "main.py"]

volumes:
  pgdata: {}