generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
    //directUrl = env("DIRECT_URL")
    //shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum sessionLabel {
  NORMAL
  MALICIOUS

  @@map("SessionLabel") //DB 실제 enum 타입명과 매핑
}

model RawLog {
  id               Int      @id @default(autoincrement())
  transaction_id   String   @unique                     // --xxxxx-- 식별자
  timestamp        DateTime @map("timestamp")                        // A: 요청 시각
  remote_host      String?  @map("remote_host")                             // A: 클라이언트 IP
  remote_port      Int?     @map("remote_port")                           // A
  local_host       String?  @map("local_host")                           // A: 서버 IP
  local_port       Int?     @map("local_port")                           // A
  method           String?  @map("method")                           // A
  uri              String?  @map("uri")                           // A
  http_version     String?  @map("http_version")                           // A
  host             String?  @map("host")                           // A
  user_agent       String?  @map("user_agent")                           // A

  request_headers  Json?    @map("request_headers")                           // I: 요청 헤더 전체
  request_body     String?  @map("request_body")                           // B: 요청 바디
  response_headers Json?    @map("response_headers")                           // J: 응답 헤더 전체
  response_body    String?  @map("response_body")                           // (선택) 응답 바디

  matched_rules    Json?    @map("matched_rules")                           // F 또는 H의 일부: 탐지된 룰 상세
  audit_summary    Json?    @map("audit_summary")                           // H: 요약 정보
  full_log         Json     @map("full_log")                           // 전체 로그(raw JSON)
  created_at       DateTime @default(now()) @map("created_at")            // 생성 시간

  // FK + relation
  sessionId        Int?     @map("sessionId")
  session          Session? @relation(fields: [sessionId], references: [id], onDelete: SetNull)

  @@map("RawLog") // 실제 테이블명이 "RawLog"
  @@index([sessionId])
}

model Session {
  id           Int      @id @default(autoincrement())
  session_id   String   @unique @map("session_id")
  ip_address   String?  @map("ip_address")
  user_agent   String?  @map("user_agent")
  start_time   DateTime @map("start_time")
  end_time     DateTime @map("end_time")
  created_at   DateTime @default(now()) @map("created_at")

  //분류 결과 저장 (처음에는 null -> 분류 후 값을 채움)
  label        sessionLabel?
  rawLogs      RawLog [] //역참조

  @@map("Session")
}

model Rule {
  id             Int      @id @default(autoincrement())
  rule_id        Int      @unique                      // ModSecurity rule id
  created_at     DateTime @default(now())
  rule_name      String                                // msg 필드에서 추출
  target         String                                // REQUEST_URI, ARGS:content 등
  operator       String                                // "@rx ..." 전체
  phase          Int                                   // 처리 단계 (보통 1 또는 2)
  action         String                                // block, deny 등
  transformation String?                               // t:none 등
  severity_level String                                // CRITICAL, HIGH, MEDIUM 등
  logdata        String?                               // logdata 필드 원문
  rule_template  Json                                  // 전체 raw 템플릿 저장 (원본 백업용)

  @@map("Rule")

  // B-tree 인덱스(Prisma가 자동으로 migration.sql에 생성)
  @@index([created_at(sort: Desc)], name: "idx_rule_created_at")
  @@index([phase],                   name: "idx_rule_phase")
  @@index([severity_level],          name: "idx_rule_severity")
  @@index([action],                  name: "idx_rule_action")

  @@index([created_at(sort: Desc), id(sort: Desc)], name: "idx_rule_created_at_id")
}
